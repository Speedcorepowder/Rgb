import logging
import asyncio
import sqlite3
import os
import threading
import aiohttp
import json
import math
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('API_TOKEN')
DRIVER_GROUP_ID = -1002619469979
ADMIN_ID = int(os.getenv('ADMIN_ID'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# === –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø ===
TRANSLATIONS = {
    'ru': {
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        'welcome': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RigaGo! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        'order_taxi': 'üöñ –ó–∞–∫–∞–∑–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è',
        'back': 'üîô –ù–∞–∑–∞–¥',

        # –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é
        'driver_menu': '–ú–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {}!',
        'not_registered_driver': '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É:',
        'fill_driver_form': 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –≤–æ–¥–∏—Ç–µ–ª—è',
        'balance': 'üí∞ –ë–∞–ª–∞–Ω—Å',
        'my_profile': 'üìã –ú–æ—è –∞–Ω–∫–µ—Ç–∞',
        'order_stats': 'üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤',
        'request_balance': 'üí≥ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å',

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
        'enter_name': '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:',
        'enter_car_number': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:',
        'enter_car_model': '–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:',
        'check_data': 'üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã:</b>\n\nüë§ –ò–º—è: {}\nüöó –ù–æ–º–µ—Ä –∞–≤—Ç–æ: {}\nüè∑ –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ: {}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?',
        'save_profile': 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É',
        'cancel': '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
        'profile_saved': '‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É –≤–æ–¥–∏—Ç–µ–ª–µ–π!\n\nüöó <b>–ú–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è</b>\nüë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {}!',
        'already_registered': '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',

        # –ó–∞–∫–∞–∑ –≤–æ–¥–∏—Ç–µ–ª—è
        'send_location': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é.',
        'send_location_btn': 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é',
        'enter_address_manually': '‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é',
        'enter_current_address': '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å:',
        'order_cancelled': 'üö´ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.',
        'your_location': 'üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {}\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:',
        'enter_destination': '‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
        'enter_destination_text': '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º:',
        'address_not_found': '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ.',
        'order_details': 'üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>\nüîπ –û—Ç–∫—É–¥–∞: {}\nüîπ –ö—É–¥–∞: {}\nüìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {:.1f} –∫–º\n‚è± –í—Ä–µ–º—è: {:.0f} –º–∏–Ω\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {}‚Ç¨\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?',
        'confirm_order': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑',
        'order_placed': '‚úÖ –ó–∞–∫–∞–∑ —Ä–∞–∑–º–µ—â–µ–Ω –≤ –≥—Ä—É–ø–ø–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π!\n–û–∂–∏–¥–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –≤–æ–¥–∏—Ç–µ–ª—å —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.',
        'order_error': '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
        'suggest_price': '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é —Ü–µ–Ω—É',

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
        'current_balance': 'üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {:.2f}‚Ç¨',
        'profile_info': 'üìã <b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:</b>\n\nüë§ –ò–º—è: {}\nüöó –ù–æ–º–µ—Ä –∞–≤—Ç–æ: {}\nüè∑ –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ: {}\nüí∞ –ë–∞–ª–∞–Ω—Å: {:.2f}‚Ç¨\n{}\n\n<i>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</i>',
        'rating_info': '‚≠ê –†–µ–π—Ç–∏–Ω–≥: {}/5.0 ({} –æ—Ü–µ–Ω–æ–∫)',
        'no_rating': '‚≠ê –†–µ–π—Ç–∏–Ω–≥: –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫',
        'stats_info': 'üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\nüìÖ <b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\nüöñ –ó–∞–∫–∞–∑–æ–≤: {}\nüí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {:.2f}‚Ç¨\n\nüìÖ <b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b>\nüöñ –ó–∞–∫–∞–∑–æ–≤: {}\nüí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {:.2f}‚Ç¨\n\nüìÖ <b>–ó–∞ –º–µ—Å—è—Ü:</b>\nüöñ –ó–∞–∫–∞–∑–æ–≤: {}\nüí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {:.2f}‚Ç¨',
        'balance_request_sent': 'üí≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
        'balance_topped_up': '–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ {0}‚Ç¨\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {1:.2f}‚Ç¨',

        # –ó–∞–∫–∞–∑—ã
        'new_order': 'üöñ <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó! #{}</b>\n\nüë§ –ö–ª–∏–µ–Ω—Ç: {}\nüì± Username: {}\n{}\nüìç <b>–û—Ç–∫—É–¥–∞:</b> {}\nüéØ <b>–ö—É–¥–∞:</b> {}\nüìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {:.1f} –∫–º\n‚è± –í—Ä–µ–º—è: {:.0f} –º–∏–Ω\nüí∞ <b>–¶–µ–Ω–∞:</b> {}‚Ç¨\n\n',
        'accept_order': '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑',
        'order_accepted': '‚úÖ <b>–ó–ê–ö–ê–ó #{} –ü–†–ò–ù–Ø–¢</b>\n\nüöó –í–æ–¥–∏—Ç–µ–ª—å: {}\nüì± Username: @{}\n{}\n\nüë§ –ö–ª–∏–µ–Ω—Ç: {}\nüìç <b>–û—Ç–∫—É–¥–∞:</b> {}\nüéØ <b>–ö—É–¥–∞:</b> {}\nüìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {:.1f} –∫–º\n‚è± –í—Ä–µ–º—è: {:.0f} –º–∏–Ω\nüí∞ <b>–¶–µ–Ω–∞:</b> {}‚Ç¨',
        'order_taken_by_driver': 'üöó <b>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>\n\n–í–æ–¥–∏—Ç–µ–ª—å: {}\nUsername: @{}\n{}\n–ö–æ–Ω—Ç–∞–∫—Ç: <a href=\'tg://user?id={}\'>–ù–∞–ø–∏—Å–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—é</a>\n\n–í–æ–¥–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è!',
        'complete_order': '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑',
        'order_completed': '‚úÖ <b>–ó–∞–∫–∞–∑ #{} –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–µ–∑–¥–∫—É —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º {}:',
        'rate_trip': '‚úÖ <b>–ó–∞–∫–∞–∑ #{} –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {}\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RigaGo!',
        'rate_client': '‚úÖ <b>–ó–∞–∫–∞–∑ #{} –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n–û—Ü–µ–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ {}:',
        'client_rated': '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É –∫–ª–∏–µ–Ω—Ç–∞! {}',

        # –û—à–∏–±–∫–∏
        'not_driver': '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.',
        'order_not_found': '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω',
        'order_already_taken': '‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º',
        'not_registered': '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å',
        'driver_banned': '‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {} –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞',
        'low_balance': '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ú–∏–Ω–∏–º—É–º 0.50‚Ç¨ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞',
        'active_order_exists': '‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º –Ω–æ–≤–æ–≥–æ.',

        # –ê–¥–º–∏–Ω
        'admin_panel': 'üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
        'drivers': 'üë• –í–æ–¥–∏—Ç–µ–ª–∏',
        'orders': 'üìã –ó–∞–∫–∞–∑—ã',
        'no_access': '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.',

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        'already_rated': '–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑',
        'thanks_for_rating': '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! {}',
        'order_completed_driver': '‚úÖ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!',
        'order_payment_info': '‚úÖ <b>–ó–∞–∫–∞–∑ #{} –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\nüí∞ –û–ø–ª–∞—Ç–∞: {:.2f}‚Ç¨ (–ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞)\nüí≥ –ö–æ–º–∏—Å—Å–∏—è: 0.50‚Ç¨ (—Å–ø–∏—Å–∞–Ω–∞ —Å –±–∞–ª–∞–Ω—Å–∞)\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!',
        'new_rating_received': 'üìä <b>–ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {}</b>\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {}',
        'rating_ban_warning': 'üìä <b>–ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {}</b>\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {}\n\n‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ —É–ø–∞–ª –Ω–∏–∂–µ 4.1. –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–æ {}.\n–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–≤—ã—Å—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.',
        'minimum_price_error': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ {}‚Ç¨.',
        'enter_valid_price': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ).',
        'active_order_client': '‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.'
    },
    'lv': {
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        'welcome': 'Laipni l≈´dzam RigaGo! Izvƒìlieties darbƒ´bu:',
        'order_taxi': 'üöñ Pas≈´tƒ´t ≈°oferi',
        'back': 'üîô Atpakaƒº',

        # –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é
        'driver_menu': '≈†ofera izvƒìlne\nLaipni l≈´dzam, {}!',
        'not_registered_driver': 'J≈´s neesat reƒ£istrƒìts kƒÅ ≈°oferis. Aizpildiet anketu:',
        'fill_driver_form': 'üìù Aizpildƒ´t ≈°ofera anketu',
        'balance': 'üí∞ Bilance',
        'my_profile': 'üìã Mana anketa',
        'order_stats': 'üìä Pas≈´tƒ´jumu skaits',
        'request_balance': 'üí≥ Pieprasƒ´t bilanci',

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
        'enter_name': 'Ievadiet savu vƒÅrdu un uzvƒÅrdu:',
        'enter_car_number': 'Ievadiet automa≈°ƒ´nas numuru:',
        'enter_car_model': 'Ievadiet automa≈°ƒ´nas marku:',
        'check_data': 'üìã <b>PƒÅrbaudiet anketas datus:</b>\n\nüë§ VƒÅrds: {}\nüöó Auto numurs: {}\nüè∑ Auto marka: {}\n\nViss pareizi?',
        'save_profile': 'üíæ SaglabƒÅt anketu',
        'cancel': '‚ùå Atcelt',
        'profile_saved': '‚úÖ Anketa veiksmƒ´gi saglabƒÅta! Laipni l≈´dzam ≈°oferu komandƒÅ!\n\nüöó <b>≈†ofera izvƒìlne</b>\nüë§ Laipni l≈´dzam, {}!',
        'already_registered': 'J≈´s jau esat reƒ£istrƒìts! Lai mainƒ´tu datus, sazinieties ar administratoru.',

        # –ó–∞–∫–∞–∑ –≤–æ–¥–∏—Ç–µ–ª—è
        'send_location': 'L≈´dzu, nos≈´tiet savu pa≈°reizƒìjo ƒ£eogrƒÅfisko atra≈°anƒÅs vietu vai ievadiet adresi manuƒÅli.',
        'send_location_btn': 'üìç Nos≈´tƒ´t atra≈°anƒÅs vietu',
        'enter_address_manually': '‚úçÔ∏è Ievadƒ´t adresi manuƒÅli',
        'enter_current_address': 'Ievadiet savu pa≈°reizƒìjo adresi:',
        'order_cancelled': 'üö´ Pas≈´tƒ´jums atcelts.',
        'your_location': 'üìç J≈´su atra≈°anƒÅs vieta: {}\n\nTagad ievadiet galamƒìrƒ∑a adresi:',
        'enter_destination': '‚úçÔ∏è Ievadƒ´t galamƒìrƒ∑a adresi',
        'enter_destination_text': '‚úçÔ∏è Ievadiet galamƒìrƒ∑a adresi ar tekstu:',
        'address_not_found': '‚ùå NeizdevƒÅs atrast norƒÅdƒ´to adresi. Mƒìƒ£iniet ievadƒ´t adresi precƒ´zƒÅk.',
        'order_details': 'üìã <b>Pas≈´tƒ´juma detaƒºas:</b>\nüîπ No kurienes: {}\nüîπ Uz kurieni: {}\nüìè AttƒÅlums: {:.1f} km\n‚è± Laiks: {:.0f} min\nüí∞ Izmaksas: {}‚Ç¨\n\nApstiprinƒÅt pas≈´tƒ´jumu?',
        'confirm_order': '‚úÖ ApstiprinƒÅt pas≈´tƒ´jumu',
        'order_placed': '‚úÖ Pas≈´tƒ´jums ievietots ≈°oferu grupƒÅ!\nGaidiet, kad ≈°oferis ar jums sazinƒÅsies tie≈°i.',
        'order_error': '‚ùå Pas≈´tƒ´juma ievieto≈°anas laikƒÅ radƒÅs kƒº≈´da.\nMƒìƒ£iniet vƒìlreiz vai sazinieties ar atbalstu.',
        'suggest_price': 'PiedƒÅvƒÅt savu cenu',

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
        'current_balance': 'üí∞ J≈´su pa≈°reizƒìjƒÅ bilance: {:.2f}‚Ç¨',
        'profile_info': 'üìã <b>J≈´su anketa:</b>\n\nüë§ VƒÅrds: {}\nüöó Auto numurs: {}\nüè∑ Auto marka: {}\nüí∞ Bilance: {:.2f}‚Ç¨\n{}\n\n<i>Lai mainƒ´tu datus, sazinieties ar administratoru</i>',
        'rating_info': '‚≠ê Reitings: {}/5.0 ({} vƒìrtƒìjumi)',
        'no_rating': '‚≠ê Reitings: nav vƒìrtƒìjumu',
        'stats_info': 'üìä <b>J≈´su statistika:</b>\n\nüìÖ <b>≈†odien:</b>\nüöñ Pas≈´tƒ´jumi: {}\nüí∞ Ie≈Üƒìmumi: {:.2f}‚Ç¨\n\nüìÖ <b>≈†onedƒìƒº:</b>\nüöñ Pas≈´tƒ´jumi: {}\nüí∞ Ie≈Üƒìmumi: {:.2f}‚Ç¨\n\nüìÖ <b>≈†omƒìnes:</b>\nüöñ Pas≈´tƒ´jumi: {}\nüí∞ Ie≈Üƒìmumi: {:.2f}‚Ç¨',
        'balance_request_sent': 'üí≥ J≈´su pieprasƒ´jums bilances papildinƒÅ≈°anai nos≈´tƒ´ts administratoram.',
        'balance_topped_up': 'J≈´su bilance ir papildinƒÅta par {0}‚Ç¨\nJaunƒÅ bilance: {1:.2f}‚Ç¨',

        # –ó–∞–∫–∞–∑—ã
        'new_order': 'üöñ <b>JAUNS PAS≈™Tƒ™JUMS! #{}</b>\n\nüë§ Klients: {}\nüì± LietotƒÅjvƒÅrds: {}\n{}\nüìç <b>No kurienes:</b> {}\nüéØ <b>Uz kurieni:</b> {}\nüìè AttƒÅlums: {:.1f} km\n‚è± Laiks: {:.0f} min\nüí∞ <b>Cena:</b> {}‚Ç¨\n\n',
        'accept_order': '‚úÖ Pie≈Üemt pas≈´tƒ´jumu',
        'order_accepted': '‚úÖ <b>PAS≈™Tƒ™JUMS #{} PIE≈ÖEMTS</b>\n\nüöó ≈†oferis: {}\nüì± LietotƒÅjvƒÅrds: @{}\n{}\n\nüë§ Klients: {}\nüìç <b>No kurienes:</b> {}\nüéØ <b>Uz kurieni:</b> {}\nüìè AttƒÅlums: {:.1f} km\n‚è± Laiks: {:.0f} min\nüí∞ <b>Cena:</b> {}‚Ç¨',
        'order_taken_by_driver': 'üöó <b>J≈´su pas≈´tƒ´jums pie≈Üemts!</b>\n\n≈†oferis: {}\nLietotƒÅjvƒÅrds: @{}\n{}\nKontakts: <a href=\'tg://user?id={}\'>Rakstƒ´t ≈°oferim</a>\n\n≈†oferis drƒ´z ar jums sazinƒÅsies!',
        'complete_order': '‚úÖ Pabeigt pas≈´tƒ´jumu',
        'rate_trip': '‚úÖ <b>Pas≈´tƒ´jums #{} pabeigts!</b>\n\nJ≈´su vƒìrtƒìjums: {}\nPaldies, ka izmantojat RigaGo!',
        'rate_client': '‚úÖ <b>Pas≈´tƒ´jums #{} pabeigts!</b>\n\nNovƒìrtƒìjiet klientu {}:',
        'client_rated': 'Paldies par klienta vƒìrtƒìjumu! {}',

        # –û—à–∏–±–∫–∏
        'not_driver': 'J≈´s neesat reƒ£istrƒìts kƒÅ ≈°oferis.',
        'order_not_found': '‚ùå Pas≈´tƒ´jums nav atrasts vai jau dzƒìsts',
        'order_already_taken': '‚ùå Pas≈´tƒ´jumu jau pie≈Üƒìmis cits ≈°oferis',
        'not_registered': '‚ùå J≈´s neesat reƒ£istrƒìts kƒÅ ≈°oferis',
        'driver_banned': '‚ùå J≈´s esat bloƒ∑ƒìts lƒ´dz {} zema reitinga dƒìƒº',
        'low_balance': '‚ùå Nepietiek lƒ´dzekƒºu bilancƒì. Minimums 0.50‚Ç¨ pas≈´tƒ´juma pie≈Üem≈°anai',
        'active_order_exists': '‚ùå Jums jau ir aktƒ´vs pas≈´tƒ´jums. Pabeidziet to pirms jauna pie≈Üem≈°anas.',

        # –ê–¥–º–∏–Ω
        'admin_panel': 'üõ† <b>Administratora panelis</b>\n\nIzvƒìlieties sadaƒºu:',
        'drivers': 'üë• ≈†oferi',
        'orders': 'üìã Pas≈´tƒ´jumi',
        'no_access': '‚ùå Jums nav piekƒºuves administratora panelim.',

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        'already_rated': 'J≈´s jau esat novƒìrtƒìjis ≈°o pas≈´tƒ´jumu',
        'thanks_for_rating': 'Paldies par vƒìrtƒìjumu! {}',
        'order_completed_driver': '‚úÖ Pas≈´tƒ´jums pabeigts!',
        'order_payment_info': '‚úÖ <b>Pas≈´tƒ´jums #{} pabeigts!</b>\n\nüí∞ MaksƒÅjums: {:.2f}‚Ç¨ (sa≈Üemiet skaidrƒÅ naudƒÅ no klienta)\nüí≥ Komisija: 0.50‚Ç¨ (norakstƒ´ta no bilances)\n\nPaldies par darbu!',
        'new_rating_received': 'üìä <b>Jauns vƒìrtƒìjums: {}</b>\n\nJ≈´su pa≈°reizƒìjais reitings: {}',
        'rating_ban_warning': 'üìä <b>Jauns vƒìrtƒìjums: {}</b>\n\nJ≈´su pa≈°reizƒìjais reitings: {}\n\n‚ö†Ô∏è <b>UZMANƒ™BU!</b> J≈´su reitings nokritis zem 4.1. J≈´s esat bloƒ∑ƒìts uz nedƒìƒºu lƒ´dz {}.\nLai atbloƒ∑ƒìtu, uzlabojiet pakalpojumu kvalitƒÅti.',
        'minimum_price_error': 'MinimƒÅlƒÅ pas≈´tƒ´juma cena {}‚Ç¨.',
        'enter_valid_price': 'L≈´dzu, ievadiet pareizu cenu (skaitli).',
        'active_order_client': '‚ùå Jums jau ir aktƒ´vs pas≈´tƒ´jums. Gaidiet tƒÅ pabeig≈°anu vai atcel≈°anu pirms jauna izveido≈°anas.'
    },
    'en': {
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        'welcome': 'Welcome to RigaGo! Choose an action:',
        'order_taxi': 'üöñ Order driver',
        'back': 'üîô Back',

        # –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é
        'driver_menu': 'Driver menu\nWelcome, {}!',
        'not_registered_driver': 'You are not registered as a driver. Fill out the form:',
        'fill_driver_form': 'üìù Fill driver form',
        'balance': 'üí∞ Balance',
        'my_profile': 'üìã My profile',
        'order_stats': 'üìä Order statistics',
        'request_balance': 'üí≥ Request balance',

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
        'enter_name': 'Enter your first and last name:',
        'enter_car_number': 'Enter car number:',
        'enter_car_model': 'Enter car model:',
        'check_data': 'üìã <b>Check form data:</b>\n\nüë§ Name: {}\nüöó Car number: {}\nüè∑ Car model: {}\n\nIs everything correct?',
        'save_profile': 'üíæ Save profile',
        'cancel': '‚ùå Cancel',
        'profile_saved': '‚úÖ Profile successfully saved! Welcome to the driver team!\n\nüöó <b>Driver menu</b>\nüë§ Welcome, {}!',
        'already_registered': 'You are already registered! To change data, contact administrator.',

        # –ó–∞–∫–∞–∑ –≤–æ–¥–∏—Ç–µ–ª—è
        'send_location': 'Please send your current geolocation or enter address manually.',
        'send_location_btn': 'üìç Send location',
        'enter_address_manually': '‚úçÔ∏è Enter address manually',
        'enter_current_address': 'Enter your current address:',
        'order_cancelled': 'üö´ Order cancelled.',
        'your_location': 'üìç Your location: {}\n\nNow enter destination address:',
        'enter_destination': '‚úçÔ∏è Enter destination address',
        'enter_destination_text': '‚úçÔ∏è Enter destination address as text:',
        'address_not_found': '‚ùå Could not find the specified address. Try entering the address more precisely.',
        'order_details': 'üìã <b>Order details:</b>\nüîπ From: {}\nüîπ To: {}\nüìè Distance: {:.1f} km\n‚è± Time: {:.0f} min\nüí∞ Cost: {}‚Ç¨\n\nConfirm order?',
        'confirm_order': '‚úÖ Confirm order',
        'order_placed': '‚úÖ Order placed in drivers group!\nWait for a driver to contact you directly.',
        'order_error': '‚ùå Error occurred while placing order.\nTry again or contact support.',
        'suggest_price': 'Suggest your price',

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
        'current_balance': 'üí∞ Your current balance: {:.2f}‚Ç¨',
        'profile_info': 'üìã <b>Your profile:</b>\n\nüë§ Name: {}\nüöó Car number: {}\nüè∑ Car model: {}\nüí∞ Balance: {:.2f}‚Ç¨\n{}\n\n<i>To change data, contact administrator</i>',
        'rating_info': '‚≠ê Rating: {}/5.0 ({} ratings)',
        'no_rating': '‚≠ê Rating: no ratings',
        'stats_info': 'üìä <b>Your statistics:</b>\n\nüìÖ <b>Today:</b>\nüöñ Orders: {}\nüí∞ Earnings: {:.2f}‚Ç¨\n\nüìÖ <b>This week:</b>\nüöñ Orders: {}\nüí∞ Earnings: {:.2f}‚Ç¨\n\nüìÖ <b>This month:</b>\nüöñ Orders: {}\nüí∞ Earnings: {:.2f}‚Ç¨',
        'balance_request_sent': 'üí≥ Your balance top-up request sent to administrator.',
        'balance_topped_up': 'Your balance has been topped up by {0}‚Ç¨\nNew balance: {1:.2f}‚Ç¨',

        # –ó–∞–∫–∞–∑—ã
        'new_order': 'üöñ <b>NEW ORDER! #{}</b>\n\nüë§ Client: {}\nüì± Username: {}\n{}\nüìç <b>From:</b> {}\nüéØ <b>To:</b> {}\nüìè Distance: {:.1f} km\n‚è± Time: {:.0f} min\nüí∞ <b>Price:</b> {}‚Ç¨\n\n',
        'accept_order': '‚úÖ Accept order',
        'order_accepted': '‚úÖ <b>ORDER #{} ACCEPTED</b>\n\nüöó Driver: {}\nüì± Username: @{}\n{}\n\nüë§ Client: {}\nüìç <b>From:</b> {}\nüéØ <b>To:</b> {}\nüìè Distance: {:.1f} km\n‚è± Time: {:.0f} min\nüí∞ <b>Price:</b> {}‚Ç¨',
        'order_taken_by_driver': 'üöó <b>Your order accepted!</b>\n\nDriver: {}\nUsername: @{}\n{}\nContact: <a href=\'tg://user?id={}\'>Message driver</a>\n\nDriver will contact you soon!',
        'complete_order': '‚úÖ Complete order',
        'order_completed': '‚úÖ <b>Order #{} completed!</b>\n\nRate the trip with driver {}:',
        'rate_trip': '‚úÖ <b>Order #{} completed!</b>\n\nYour rating: {}\nThank you for using RigaGo!',
        'rate_client': '‚úÖ <b>Order #{} completed!</b>\n\nRate the client {}:',
        'client_rated': 'Thank you for rating the client! {}',

        # –û—à–∏–±–∫–∏
        'not_driver': 'You are not registered as a driver.',
        'order_not_found': '‚ùå Order not found or already deleted',
        'order_already_taken': '‚ùå Order already taken by another driver',
        'not_registered': '‚ùå You are not registered as a driver',
        'driver_banned': '‚ùå You are banned until {} due to low rating',
        'low_balance': '‚ùå Insufficient balance. Minimum 0.50‚Ç¨ required to accept order',
        'active_order_exists': '‚ùå You already have an active order. Complete it before accepting a new one.',

        # –ê–¥–º–∏–Ω
        'admin_panel': 'üõ† <b>Admin panel</b>\n\nSelect section:',
        'drivers': 'üë• Drivers',
        'orders': 'üìã Orders',
        'no_access': '‚ùå You do not have access to admin panel.',

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        'already_rated': 'You have already rated this order',
        'thanks_for_rating': 'Thank you for rating! {}',
        'order_completed_driver': '‚úÖ Order completed!',
        'order_payment_info': '‚úÖ <b>Order #{} completed!</b>\n\nüí∞ Payment: {:.2f}‚Ç¨ (receive cash from client)\nüí≥ Commission: 0.50‚Ç¨ (deducted from balance)\n\nThank you for your work!',
        'new_rating_received': 'üìä <b>New rating: {}</b>\n\nYour current rating: {}',
        'rating_ban_warning': 'üìä <b>New rating: {}</b>\n\nYour current rating: {}\n\n‚ö†Ô∏è <b>WARNING!</b> Your rating dropped below 4.1. You are banned for a week until {}.\nTo unblock, improve service quality.',
        'minimum_price_error': 'Minimum order price {}‚Ç¨.',
        'enter_valid_price': 'Please enter a valid price (number).',
        'active_order_client': '‚ùå You already have an active order. Wait for its completion or cancellation before creating a new one.'
    }
}

# === –°–û–°–¢–û–Ø–ù–ò–Ø FSM ===
class LanguageSelection(StatesGroup):
    waiting_for_language = State()

class OrderTaxi(StatesGroup):
    waiting_for_location = State()
    waiting_for_address = State()
    waiting_for_destination = State()
    waiting_for_confirmation = State()
    waiting_for_suggested_price = State()

class DriverRegistration(StatesGroup):
    waiting_for_name = State()
    waiting_for_car_number = State()
    waiting_for_car_model = State()
    waiting_for_confirmation = State()

class AdminOperations(StatesGroup):
    waiting_for_balance_amount = State()

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
class Database:
    def __init__(self, db_name='driver_bot.db'):
        self.conn = sqlite3.connect(db_name, check_same_thread=False)
        self.lock = threading.Lock()
        self._init_tables()

    def _init_tables(self):
        with self.lock:
            c = self.conn.cursor()
            c.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                name TEXT, 
                car_number TEXT, 
                car_model TEXT,
                balance REAL DEFAULT 0, 
                registered INTEGER DEFAULT 0,
                is_driver INTEGER DEFAULT 0,
                language TEXT DEFAULT 'ru',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                total_orders INTEGER DEFAULT 0
            )""")
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            try:
                c.execute("ALTER TABLE users ADD COLUMN is_driver INTEGER DEFAULT 0")
            except:
                pass
            try:
                c.execute("ALTER TABLE users ADD COLUMN language TEXT DEFAULT 'ru'")
            except:
                pass
            try:
                c.execute("ALTER TABLE users ADD COLUMN ban_until TIMESTAMP")
            except:
                pass
            try:
                c.execute("ALTER TABLE users ADD COLUMN total_orders INTEGER DEFAULT 0")
            except:
                pass

            c.execute("""
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                client_id INTEGER, 
                address TEXT, 
                region TEXT, 
                price REAL,
                status TEXT DEFAULT 'new', 
                driver_id INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                completed_at TIMESTAMP
            )""")
            c.execute("""
            CREATE TABLE IF NOT EXISTS balance_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                amount REAL,
                operation_type TEXT,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )""")
            c.execute("""
            CREATE TABLE IF NOT EXISTS ratings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER,
                driver_id INTEGER,
                client_id INTEGER,
                rating INTEGER,
                rating_type TEXT DEFAULT 'driver',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )""")

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É rating_type –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            try:
                c.execute("ALTER TABLE ratings ADD COLUMN rating_type TEXT DEFAULT 'driver'")
            except:
                pass

            self.conn.commit()

    def get_user(self, user_id):
        with self.lock:
            c = self.conn.cursor()
            c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
            return c.fetchone()

    def set_user_language(self, user_id, language):
        with self.lock:
            c = self.conn.cursor()
            c.execute("INSERT OR IGNORE INTO users (user_id, language) VALUES (?, ?)", (user_id, language))
            c.execute("UPDATE users SET language = ? WHERE user_id = ?", (language, user_id))
            self.conn.commit()

    def get_user_language(self, user_id):
        user = self.get_user(user_id)
        if user and len(user) > 7 and user[7]:
            return user[7]
        return 'ru'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π

    def register_driver(self, user_id, name, car_number, car_model):
        with self.lock:
            c = self.conn.cursor()
            c.execute("""
                INSERT OR REPLACE INTO users 
                (user_id, name, car_number, car_model, is_driver, registered) 
                VALUES (?, ?, ?, ?, 1, 1)
            """, (user_id, name, car_number, car_model))
            self.conn.commit()

    def update_user_balance(self, user_id, amount, operation_type, description):
        with self.lock:
            c = self.conn.cursor()
            c.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
            c.execute("""
                INSERT INTO balance_history (user_id, amount, operation_type, description) 
                VALUES (?, ?, ?, ?)
            """, (user_id, amount, operation_type, description))
            self.conn.commit()

    def create_order(self, client_id, address, price, region):
        with self.lock:
            c = self.conn.cursor()
            c.execute("INSERT INTO orders (client_id, address, price, region, status) VALUES (?, ?, ?, ?, 'new')",
                      (client_id, address, price, region))
            self.conn.commit()
            return c.lastrowid

    def accept_order(self, driver_id, order_id):
        with self.lock:
            c = self.conn.cursor()
            c.execute("SELECT * FROM orders WHERE id = ? AND status = 'new'", (order_id,))
            order = c.fetchone()
            if order:
                c.execute("UPDATE orders SET status = 'accepted', driver_id = ? WHERE id = ?", (driver_id, order_id))
                c.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (order[4], driver_id))
                self.conn.commit()
                return order
            return None

    def complete_order(self, order_id):
        with self.lock:
            c = self.conn.cursor()
            c.execute("UPDATE orders SET status = 'completed', completed_at = CURRENT_TIMESTAMP WHERE id = ?", (order_id,))
            self.conn.commit()

    def get_driver_stats(self, driver_id):
        with self.lock:
            c = self.conn.cursor()
            now = datetime.now()
            today = now.strftime('%Y-%m-%d')
            week_ago = (now - timedelta(days=7)).strftime('%Y-%m-%d')
            month_ago = (now - timedelta(days=30)).strftime('%Y-%m-%d')

            # –ó–∞–∫–∞–∑—ã –∑–∞ –¥–µ–Ω—å
            c.execute("""
                SELECT COUNT(*), COALESCE(SUM(price), 0) FROM orders 
                WHERE driver_id = ? AND status = 'completed' AND DATE(completed_at) = ?
            """, (driver_id, today))
            day_stats = c.fetchone()

            # –ó–∞–∫–∞–∑—ã –∑–∞ –Ω–µ–¥–µ–ª—é
            c.execute("""
                SELECT COUNT(*), COALESCE(SUM(price), 0) FROM orders 
                WHERE driver_id = ? AND status = 'completed' AND DATE(completed_at) >= ?
            """, (driver_id, week_ago))
            week_stats = c.fetchone()

            # –ó–∞–∫–∞–∑—ã –∑–∞ –º–µ—Å—è—Ü
            c.execute("""
                SELECT COUNT(*), COALESCE(SUM(price), 0) FROM orders 
                WHERE driver_id = ? AND status = 'completed' AND DATE(completed_at) >= ?
            """, (driver_id, month_ago))
            month_stats = c.fetchone()

            return {
                'day': {'orders': day_stats[0], 'earnings': day_stats[1]},
                'week': {'orders': week_stats[0], 'earnings': week_stats[1]},
                'month': {'orders': month_stats[0], 'earnings': month_stats[1]}
            }

    def get_all_drivers(self):
        with self.lock:
            c = self.conn.cursor()
            c.execute("SELECT user_id, name, balance FROM users WHERE is_driver = 1 ORDER BY name")
            return c.fetchall()

    def get_recent_orders(self, limit=10):
        with self.lock:
            c = self.conn.cursor()
            c.execute("""
                SELECT o.id, o.client_id, o.address, o.region, o.price, o.status, 
                       o.driver_id, o.created_at, u1.name as client_name, u2.name as driver_name
                FROM orders o
                LEFT JOIN users u1 ON o.client_id = u1.user_id
                LEFT JOIN users u2 ON o.driver_id = u2.user_id
                ORDER BY o.created_at DESC
                LIMIT ?
            """, (limit,))
            return c.fetchall()

    def add_rating(self, order_id, driver_id, client_id, rating, rating_type='driver'):
        with self.lock:
            c = self.conn.cursor()
            c.execute("""
                INSERT INTO ratings (order_id, driver_id, client_id, rating, rating_type) 
                VALUES (?, ?, ?, ?, ?)
            """, (order_id, driver_id, client_id, rating, rating_type))
            self.conn.commit()

    def get_driver_rating(self, driver_id):
        with self.lock:
            c = self.conn.cursor()
            c.execute("""
                SELECT AVG(CAST(rating AS FLOAT)), COUNT(*) FROM ratings 
                WHERE driver_id = ? AND rating_type = 'driver'
            """, (driver_id,))
            result = c.fetchone()
            if result and result[1] > 0:
                return round(result[0], 1), result[1]
            return None, 0

    def get_client_rating(self, client_id):
        with self.lock:
            c = self.conn.cursor()
            c.execute("""
                SELECT AVG(CAST(rating AS FLOAT)), COUNT(*) FROM ratings 
                WHERE client_id = ? AND rating_type = 'client'
            """, (client_id,))
            result = c.fetchone()
            if result and result[1] > 0:
                return round(result[0], 1), result[1]
            return None, 0

    def check_and_ban_driver(self, driver_id):
        rating, count = self.get_driver_rating(driver_id)
        if rating and count >= 5 and rating < 4.1:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –≤–æ–¥–∏—Ç–µ–ª—å
            is_banned, existing_ban = self.is_driver_banned(driver_id)
            if not is_banned:
                ban_until = datetime.now() + timedelta(days=7)
                with self.lock:
                    c = self.conn.cursor()
                    c.execute("UPDATE users SET ban_until = ? WHERE user_id = ?", 
                             (ban_until.strftime('%Y-%m-%d %H:%M:%S'), driver_id))
                    self.conn.commit()
                return True, ban_until
        return False, None

    def is_driver_banned(self, driver_id):
        with self.lock:
            c = self.conn.cursor()
            c.execute("SELECT ban_until FROM users WHERE user_id = ?", (driver_id,))
            result = c.fetchone()
            if result and result[0]:
                ban_until = datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S')
                if datetime.now() < ban_until:
                    return True, ban_until
                else:
                    # –°–Ω–∏–º–∞–µ–º –±–∞–Ω –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
                    c.execute("UPDATE users SET ban_until = NULL WHERE user_id = ?", (driver_id,))
                    self.conn.commit()
            return False, None

    def get_client_order_count(self, client_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞"""
        with self.lock:
            c = self.conn.cursor()
            c.execute("SELECT COUNT(*) FROM orders WHERE client_id = ?", (client_id,))
            return c.fetchone()[0]

    def increment_client_orders(self, client_id):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞"""
        with self.lock:
            c = self.conn.cursor()
            c.execute("INSERT OR IGNORE INTO users (user_id, total_orders) VALUES (?, 0)", (client_id,))
            c.execute("UPDATE users SET total_orders = total_orders + 1 WHERE user_id = ?", (client_id,))
            self.conn.commit()

# === –£–¢–ò–õ–ò–¢–´ ===
def get_text(user_id, key, *args):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    language = db.get_user_language(user_id)
    if language not in TRANSLATIONS:
        language = 'ru'

    text = TRANSLATIONS[language].get(key, TRANSLATIONS['ru'].get(key, key))
    if args:
        try:
            return text.format(*args)
        except:
            return text
    return text

async def get_route_info(from_lat, from_lon, to_lat, to_lon):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ —á–µ—Ä–µ–∑ OpenRouteService"""
    url = "https://api.openrouteservice.org/v2/directions/driving-car"

    headers = {
        'Accept': 'application/json, application/geo+json, application/gpx+xml, img/png; charset=utf-8',
        'Content-Type': 'application/json; charset=utf-8'
    }

    coordinates = [[from_lon, from_lat], [to_lon, to_lat]]

    data = {
        "coordinates": coordinates,
        "format": "json"
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as resp:
                if resp.status == 200:
                    result = await resp.json()
                    if 'routes' in result and len(result['routes']) > 0:
                        route = result['routes'][0]['summary']
                        distance_km = route['distance'] / 1000
                        duration_min = route['duration'] / 60
                        return distance_km, duration_min
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")

    # –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–∏
    R = 6371  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    lat1, lon1 = math.radians(from_lat), math.radians(from_lon)
    lat2, lon2 = math.radians(to_lat), math.radians(to_lon)

    dlat = lat2 - lat1
    dlon = lon2 - lon1

    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
    c = 2 * math.asin(math.sqrt(a))
    distance_km = R * c

    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å 40 –∫–º/—á –≤ –≥–æ—Ä–æ–¥–µ
    duration_min = (distance_km / 40) * 60

    return distance_km, duration_min

async def get_address(lat, lon):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —á–µ—Ä–µ–∑ OpenStreetMap"""
    url = f'https://nominatim.openstreetmap.org/reverse?format=json&lat={lat}&lon={lon}&zoom=18&addressdetails=1'
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers={'User-Agent': 'RigaGo_Bot'}) as resp:
            if resp.status == 200:
                data = await resp.json()
                return data.get('display_name', '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'

async def geocode_address(address):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∞–¥—Ä–µ—Å—É"""
    url = f'https://nominatim.openstreetmap.org/search?format=json&q={address}&limit=1'
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers={'User-Agent': 'RigaGo_Bot'}) as resp:
            if resp.status == 200:
                data = await resp.json()
                if data:
                    return float(data[0]['lat']), float(data[0]['lon'])
            return None, None

def calculate_price(distance_km, duration_minutes=None):
    """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏"""
    min_price = 2.50
    per_km = 0.45
    per_minute = 0.10

    distance_cost = per_km * distance_km

    time_cost = 0
    if duration_minutes:
        time_cost = per_minute * duration_minutes

    total_cost = distance_cost + time_cost
    final_price = max(min_price, total_cost)

    return round(final_price, 2)

async def delete_order_after_delay(order_id, delay_seconds):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    await asyncio.sleep(delay_seconds)

    if order_id in active_orders:
        order = active_orders[order_id]
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
            await router.bot.delete_message(
                chat_id=DRIVER_GROUP_ID,
                message_id=order['message_id']
            )
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≥—Ä—É–ø–ø—ã")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")

        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        del active_orders[order_id]
        print(f"–ó–∞–∫–∞–∑ {order_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥")

async def cleanup_old_orders():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    current_time = datetime.now()
    orders_to_remove = []
    
    for order_id, order in active_orders.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∑–∞–∫–∞–∑–∞
        order_age = current_time - order['created_at']
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∏–ª–∏ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–∏–Ω—è—Ç—ã—Ö
        should_remove = False
        if order['status'] == 'active' and order_age.total_seconds() > 3600:  # 1 —á–∞—Å
            should_remove = True
        elif order['status'] == 'accepted' and order_age.total_seconds() > 300:  # 5 –º–∏–Ω—É—Ç
            should_remove = True
            
        if should_remove:
            orders_to_remove.append(order_id)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã
    for order_id in orders_to_remove:
        order = active_orders[order_id]
        try:
            await router.bot.delete_message(
                chat_id=DRIVER_GROUP_ID,
                message_id=order['message_id']
            )
            print(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑ –≥—Ä—É–ø–ø—ã")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
        
        del active_orders[order_id]
        print(f"–°—Ç–∞—Ä—ã–π –∑–∞–∫–∞–∑ {order_id} —É–¥–∞–ª–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")

async def periodic_cleanup():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
    while True:
        await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
        await cleanup_old_orders()

# === –†–û–£–¢–ï–† –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
active_orders = {}
order_counter = 0

@router.message(F.text == '/admin')
async def admin_command(message: Message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.answer(get_text(user_id, 'no_access'))
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_text(user_id, 'drivers')), KeyboardButton(text=get_text(user_id, 'orders'))],
            [KeyboardButton(text=get_text(user_id, 'back'))]
        ],
        resize_keyboard=True
    )
    await message.answer(get_text(user_id, 'admin_panel'), parse_mode="HTML", reply_markup=keyboard)

@router.message(F.text == '/start')
async def start_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = db.get_user(user_id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π –∏–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–ª —è–∑—ã–∫
    if not user or not user[7]:  # language field
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
                InlineKeyboardButton(text="üá±üáª Latvie≈°u", callback_data="lang_lv")
            ],
            [InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")]
        ])

        await message.answer(
            "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Izvƒìlieties valodu / Choose language:",
            reply_markup=keyboard
        )
        await state.set_state(LanguageSelection.waiting_for_language)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        await show_main_menu(message, user_id)

@router.callback_query(F.data.startswith("lang_"))
async def language_selected(callback: CallbackQuery, state: FSMContext):
    language = callback.data.split("_")[1]
    user_id = callback.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    db.set_user_language(user_id, language)
    await state.clear()

    await callback.answer()
    await callback.message.delete()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    await show_main_menu_from_callback(callback, user_id)

async def show_main_menu(message: Message, user_id: int):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_text(user_id, 'order_taxi'))]
        ],
        resize_keyboard=True
    )
    await message.answer(get_text(user_id, 'welcome'), reply_markup=keyboard)

async def show_main_menu_from_callback(callback: CallbackQuery, user_id: int):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_text(user_id, 'order_taxi'))]
        ],
        resize_keyboard=True
    )
    await callback.message.answer(get_text(user_id, 'welcome'), reply_markup=keyboard)

@router.message(F.text == '/driver')
async def driver_menu(message: Message):
    user_id = message.from_user.id
    user = db.get_user(user_id)

    if not user or not user[6]:  # is_driver
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=get_text(user_id, 'fill_driver_form'))],
                [KeyboardButton(text=get_text(user_id, 'back'))]
            ],
            resize_keyboard=True
        )
        await message.answer(get_text(user_id, 'not_registered_driver'), reply_markup=keyboard)
    else:
        # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=get_text(user_id, 'balance')), KeyboardButton(text=get_text(user_id, 'my_profile'))],
                [KeyboardButton(text=get_text(user_id, 'order_stats')), KeyboardButton(text=get_text(user_id, 'request_balance'))],
                [KeyboardButton(text=get_text(user_id, 'back'))]
            ],
            resize_keyboard=True
        )
        await message.answer(get_text(user_id, 'driver_menu', user[1]), reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–∫–∞—Ü–∏–∏
@router.message(F.location)
async def handle_location(message: Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state == OrderTaxi.waiting_for_location:
        await process_location(message, state)
    elif current_state == OrderTaxi.waiting_for_address:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ
        await process_location(message, state)
    elif current_state == OrderTaxi.waiting_for_destination:
        await process_destination_location(message, state)

@router.message(F.text)
async def handle_text_messages(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    current_state = await state.get_state()

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    fill_driver_form = get_text(user_id, 'fill_driver_form')
    order_taxi = get_text(user_id, 'order_taxi')
    back = get_text(user_id, 'back')
    balance = get_text(user_id, 'balance')
    my_profile = get_text(user_id, 'my_profile')
    order_stats = get_text(user_id, 'order_stats')
    request_balance = get_text(user_id, 'request_balance')
    save_profile = get_text(user_id, 'save_profile')
    cancel = get_text(user_id, 'cancel')
    send_location_btn = get_text(user_id, 'send_location_btn')
    enter_address_manually = get_text(user_id, 'enter_address_manually')
    enter_destination = get_text(user_id, 'enter_destination')
    confirm_order = get_text(user_id, 'confirm_order')
    drivers = get_text(user_id, 'drivers')
    orders = get_text(user_id, 'orders')
    suggest_price = get_text(user_id, 'suggest_price')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å)
    if text == cancel and current_state is not None:
        await cancel_order(message, state)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
    if current_state == DriverRegistration.waiting_for_name:
        await process_driver_name(message, state)
        return
    elif current_state == DriverRegistration.waiting_for_car_number:
        await process_car_number(message, state)
        return
    elif current_state == DriverRegistration.waiting_for_car_model:
        await process_car_model(message, state)
        return
    elif current_state == DriverRegistration.waiting_for_confirmation:
        if text == save_profile:
            await save_driver_profile(message, state)
        return
    elif current_state == OrderTaxi.waiting_for_location:
        if text == enter_address_manually:
            await input_address_manually(message, state)
        return
    elif current_state == OrderTaxi.waiting_for_address:
        await process_address_text(message, state)
        return
    elif current_state == OrderTaxi.waiting_for_destination:
        if text == enter_destination:
            await input_destination_manually(message, state)
        else:
            await process_destination_text(message, state)
        return
    elif current_state == OrderTaxi.waiting_for_confirmation:
        if text == confirm_order:
            await confirm_order_handler(message, state)
        elif text == suggest_price:
            await suggest_price_handler(message, state)
        return
    elif current_state == OrderTaxi.waiting_for_suggested_price:
        await process_suggested_price(message, state)
        return
    elif current_state == AdminOperations.waiting_for_balance_amount:
        await process_balance_amount(message, state)
        return

    # –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM)
    if current_state is None:
        if text == fill_driver_form:
            await start_driver_registration(message, state)
        elif text == order_taxi:
            await order_taxi_handler(message, state)
        elif text == back:
            await back_to_main(message, state)
        elif text == balance:
            await show_balance(message)
        elif text == my_profile:
            await show_profile(message)
        elif text == order_stats:
            await show_order_stats(message)
        elif text == request_balance:
            await request_balance_handler(message)
        elif text == drivers and message.from_user.id == ADMIN_ID:
            await admin_drivers_list(message)
        elif text == orders and message.from_user.id == ADMIN_ID:
            await admin_orders_list(message)

async def start_driver_registration(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = db.get_user(user_id)

    if user and user[5]:  # registered
        await message.answer(get_text(user_id, 'already_registered'))
        return

    await message.answer(get_text(user_id, 'enter_name'))
    await state.set_state(DriverRegistration.waiting_for_name)

async def process_driver_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(name=message.text)
    await message.answer(get_text(user_id, 'enter_car_number'))
    await state.set_state(DriverRegistration.waiting_for_car_number)

async def process_car_number(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(car_number=message.text)
    await message.answer(get_text(user_id, 'enter_car_model'))
    await state.set_state(DriverRegistration.waiting_for_car_model)

async def process_car_model(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    await state.update_data(car_model=message.text)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    profile_text = get_text(user_id, 'check_data', data['name'], data['car_number'], message.text)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_text(user_id, 'save_profile'))],
            [KeyboardButton(text=get_text(user_id, 'cancel'))]
        ],
        resize_keyboard=True
    )

    await message.answer(profile_text, parse_mode="HTML", reply_markup=keyboard)
    await state.set_state(DriverRegistration.waiting_for_confirmation)

async def save_driver_profile(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
    if not all(key in data for key in ['name', 'car_number', 'car_model']):
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –î–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –Ω–µ–ø–æ–ª–Ω—ã–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.register_driver(user_id, data['name'], data['car_number'], data['car_model'])

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
    try:
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        for i in range(10):
            try:
                await message.bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=message.message_id - i
                )
            except:
                continue  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —Å—Ç–∞—Ä–æ–µ)
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

    await state.clear()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_text(user_id, 'balance')), KeyboardButton(text=get_text(user_id, 'my_profile'))],
            [KeyboardButton(text=get_text(user_id, 'order_stats')), KeyboardButton(text=get_text(user_id, 'request_balance'))],
            [KeyboardButton(text=get_text(user_id, 'back'))]
        ],
        resize_keyboard=True
    )

    await message.answer(
        get_text(user_id, 'profile_saved', data['name']),
        parse_mode="HTML",
        reply_markup=keyboard
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try:
        await message.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üÜï <b>–ù–æ–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è:</b>\n\n"
                 f"üë§ –ò–º—è: {data['name']}\n"
                 f"üöó –ù–æ–º–µ—Ä –∞–≤—Ç–æ: {data['car_number']}\n"
                 f"üè∑ –ú–∞—Ä–∫–∞: {data['car_model']}\n"
                 f"üÜî ID: {user_id}\n"
                 f"üë§ Username: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}",
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

async def show_balance(message: Message):
    user_id = message.from_user.id
    user = db.get_user(user_id)

    if not user or not user[6]:
        await message.answer(get_text(user_id, 'not_driver'))
        return

    await message.answer(get_text(user_id, 'current_balance', user[4]))

async def show_profile(message: Message):
    user_id = message.from_user.id
    user = db.get_user(user_id)

    if not user or not user[6]:
        await message.answer(get_text(user_id, 'not_driver'))
        return

    rating, rating_count = db.get_driver_rating(user_id)
    rating_text = get_text(user_id, 'rating_info', rating, rating_count) if rating else get_text(user_id, 'no_rating')

    profile_text = get_text(user_id, 'profile_info', user[1], user[2], user[3], user[4], rating_text)

    await message.answer(profile_text, parse_mode="HTML")

async def show_order_stats(message: Message):
    user_id = message.from_user.id
    user = db.get_user(user_id)

    if not user or not user[6]:
        await message.answer(get_text(user_id, 'not_driver'))
        return

    stats = db.get_driver_stats(user_id)

    stats_text = get_text(user_id, 'stats_info',
                         stats['day']['orders'], stats['day']['earnings'],
                         stats['week']['orders'], stats['week']['earnings'],
                         stats['month']['orders'], stats['month']['earnings'])

    await message.answer(stats_text, parse_mode="HTML")

async def request_balance_handler(message: Message):
    user_id = message.from_user.id
    user = db.get_user(user_id)

    if not user or not user[6]:
        await message.answer(get_text(user_id, 'not_driver'))
        return

    await message.answer(get_text(user_id, 'balance_request_sent'))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω—É
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ (–±–∞–ª–∞–Ω—Å = 0)
        keyboard_buttons = [
            [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"add_balance_{user_id}")]
        ]
        
        # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å 0, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
        if user[4] == 0:
            keyboard_buttons.append([InlineKeyboardButton(text="üë• –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", callback_data=f"add_to_group_{user_id}")])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await router.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üí≥ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
                 f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {user[1]}\n"
                 f"üöó –ê–≤—Ç–æ: {user[2]} ({user[3]})\n"
                 f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user[4]:.2f}‚Ç¨\n"
                 f"ID: {user_id}"
                 f"{' (üÜï –ù–æ–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å)' if user[4] == 0 else ''}",
            parse_mode="HTML",
            reply_markup=keyboard
        )
    except:
        await message.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def back_to_main(message: Message, state: FSMContext = None):
    user_id = message.from_user.id
    if state:
        await state.clear()
    await show_main_menu(message, user_id)

# === –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ===

async def admin_drivers_list(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    drivers = db.get_all_drivers()

    if not drivers:
        await message.answer("üë• –í–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    keyboard_buttons = []
    for driver in drivers:
        user_id, name, balance = driver
        button_text = f"üë§ {name} (üí∞ {balance:.2f}‚Ç¨)"
        keyboard_buttons.append([InlineKeyboardButton(
            text=button_text, 
            callback_data=f"driver_info_{user_id}"
        )])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await message.answer("üë• <b>–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", parse_mode="HTML", reply_markup=keyboard)

@router.callback_query(F.data.startswith("driver_info_"))
async def show_driver_info(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    user_id = int(callback.data.split("_")[2])
    user = db.get_user(user_id)

    if not user:
        await callback.answer("‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    stats = db.get_driver_stats(user_id)
    rating, rating_count = db.get_driver_rating(user_id)
    rating_text = f"‚≠ê {rating}/5.0 ({rating_count} –æ—Ü–µ–Ω–æ–∫)" if rating else "‚≠ê –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫"

    is_banned, ban_until = db.is_driver_banned(user_id)
    ban_text = f"\n‚ö†Ô∏è <b>–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù –¥–æ {ban_until.strftime('%d.%m.%Y %H:%M')}</b>" if is_banned else ""

    driver_info = (
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ:</b>\n\n"
        f"–ò–º—è: {user[1]}\n"
        f"üöó –ù–æ–º–µ—Ä –∞–≤—Ç–æ: {user[2]}\n"
        f"üè∑ –ú–∞—Ä–∫–∞: {user[3]}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user[4]:.2f}‚Ç¨\n"
        f"{rating_text}{ban_text}\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"–ó–∞ –¥–µ–Ω—å: {stats['day']['orders']} –∑–∞–∫–∞–∑–æ–≤, {stats['day']['earnings']:.2f}‚Ç¨\n"
        f"–ó–∞ –Ω–µ–¥–µ–ª—é: {stats['week']['orders']} –∑–∞–∫–∞–∑–æ–≤, {stats['week']['earnings']:.2f}‚Ç¨\n"
        f"–ó–∞ –º–µ—Å—è—Ü: {stats['month']['orders']} –∑–∞–∫–∞–∑–æ–≤, {stats['month']['earnings']:.2f}‚Ç¨"
    )

    keyboard_buttons = [
        [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"add_balance_{user_id}")],
        [InlineKeyboardButton(text="üóë –°–±—Ä–æ—Å–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data=f"reset_driver_{user_id}")],
    ]

    if is_banned:
        keyboard_buttons.insert(1, [InlineKeyboardButton(text="üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unban_driver_{user_id}")])

    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_drivers")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await callback.message.edit_text(driver_info, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "back_to_drivers")
async def back_to_drivers_list(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    drivers = db.get_all_drivers()

    if not drivers:
        await callback.message.edit_text("üë• –í–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    keyboard_buttons = []
    for driver in drivers:
        user_id, name, balance = driver
        button_text = f"üë§ {name} (üí∞ {balance:.2f}‚Ç¨)"
        keyboard_buttons.append([InlineKeyboardButton(
            text=button_text, 
            callback_data=f"driver_info_{user_id}"
        )])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await callback.message.edit_text("üë• <b>–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("unban_driver_"))
async def unban_driver_callback(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    user_id = int(callback.data.split("_")[2])
    user = db.get_user(user_id)

    if not user:
        await callback.answer("‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    with db.lock:
        c = db.conn.cursor()
        c.execute("UPDATE users SET ban_until = NULL WHERE user_id = ?", (user_id,))
        db.conn.commit()

    await callback.answer(f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {user[1]} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é
    try:
        user_lang = db.get_user_language(user_id)
        await router.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ú–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã."
        )
    except:
        pass

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ
    await show_driver_info(callback)

@router.callback_query(F.data.startswith("reset_driver_"))
async def reset_driver_callback(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    user_id = int(callback.data.split("_")[2])
    user = db.get_user(user_id)

    if not user:
        await callback.answer("‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    with db.lock:
        c = db.conn.cursor()
        c.execute("UPDATE users SET registered = 0, is_driver = 0 WHERE user_id = ?", (user_id,))
        db.conn.commit()

    await callback.answer(f"‚úÖ –ê–Ω–∫–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è {user[1]} —Å–±—Ä–æ—à–µ–Ω–∞", show_alert=True)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é
    try:
        await router.bot.send_message(
            chat_id=user_id,
            text="‚ö†Ô∏è –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                 "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ."
        )
    except:
        pass

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π
    await back_to_drivers_list(callback)

async def admin_orders_list(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    with db.lock:
        c = db.conn.cursor()
        c.execute("""
            SELECT o.id, o.client_id, o.address, o.region, o.price, o.status, 
                   o.driver_id, o.created_at, u1.name as client_name, u2.name as driver_name,
                   COALESCE(u1.total_orders, 0) as client_orders
            FROM orders o
            LEFT JOIN users u1 ON o.client_id = u1.user_id
            LEFT JOIN users u2 ON o.driver_id = u2.user_id
            ORDER BY o.created_at DESC
            LIMIT 10
        """)
        orders = c.fetchall()

    if not orders:
        await message.answer("üìã –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    orders_text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"

    for order in orders:
        order_id, client_id, address, region, price, status, driver_id, created_at, client_name, driver_name, client_orders = order

        status_emoji = {
            'new': 'üÜï',
            'accepted': '‚úÖ',
            'completed': '‚úÖ'
        }.get(status, '‚ùì')

        # Add üí∞ emoji if the order has a suggested price
        if status == 'new' and price != calculate_price(order[4]):
            status_emoji = 'üí∞' + status_emoji

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
        client_rating, client_rating_count = db.get_client_rating(client_id)
        client_warning = ""
        if client_rating and client_rating < 3.0:
            client_warning = " ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï –ì–ê–ù–î–û–ù!"

        orders_text += f"{status_emoji} <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n"
        orders_text += f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}{client_warning}\n"
        orders_text += f"üìä –ó–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞: {client_orders}\n"
        if client_rating:
            orders_text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞: {client_rating}/5.0\n"
        orders_text += f"üìç –ê–¥—Ä–µ—Å: {address}\n"
        orders_text += f"üí∞ –¶–µ–Ω–∞: {price}‚Ç¨\n"

        if driver_name:
            orders_text += f"üöó –í–æ–¥–∏—Ç–µ–ª—å: {driver_name}\n"
        else:
            orders_text += f"üöó –í–æ–¥–∏—Ç–µ–ª—å: –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n"

        orders_text += f"üìÖ –î–∞—Ç–∞: {created_at}\n"
        orders_text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"

    await message.answer(orders_text, parse_mode="HTML")

@router.message(F.text.regexp(r'/balance_(\d+)'))
async def admin_add_balance_command(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return

    user_id = int(message.text.split('_')[1])
    user = db.get_user(user_id)

    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await state.update_data(target_user_id=user_id)
    await state.set_state(AdminOperations.waiting_for_balance_amount)
    await message.answer(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤–æ–¥–∏—Ç–µ–ª—è {user[1]}:")

@router.message(AdminOperations.waiting_for_balance_amount)
async def process_balance_amount(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return

    try:
        amount = float(message.text)
        data = await state.get_data()
        user_id = data['target_user_id']

        user = db.get_user(user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        db.update_user_balance(user_id, amount, "admin_add", f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º –Ω–∞ {amount}‚Ç¨")

        await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –≤–æ–¥–∏—Ç–µ–ª—è {user[1]} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚Ç¨")

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        updated_user = db.get_user(user_id)
        new_balance = updated_user[4] if updated_user else user[4] + amount

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ
        try:
            await router.bot.send_message(
                chat_id=user_id,
                text=f"üí∞ {get_text(user_id, 'balance_topped_up', amount, new_balance)}"
            )
        except:
            pass

        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ).")

@router.message(F.text.regexp(r'/reset_(\d+)'))
async def admin_reset_driver(message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    user_id = int(message.text.split('_')[1])
    user = db.get_user(user_id)

    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with db.lock:
        c = db.conn.cursor()
        c.execute("UPDATE users SET registered = 0, is_driver = 0 WHERE user_id = ?", (user_id,))
        db.conn.commit()

    await message.answer(f"‚úÖ –ê–Ω–∫–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è {user[1]} —Å–±—Ä–æ—à–µ–Ω–∞.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é
    try:
        await router.bot.send_message(
            chat_id=user_id,
            text="‚ö†Ô∏è –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                 "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ."
        )
    except:
        pass

@router.callback_query(F.data.startswith("add_balance_"))
async def admin_add_balance_callback(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    user_id = int(callback.data.split("_")[2])
    user = db.get_user(user_id)

    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await state.update_data(target_user_id=user_id)
    await state.set_state(AdminOperations.waiting_for_balance_amount)
    await callback.message.answer(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤–æ–¥–∏—Ç–µ–ª—è {user[1]}:")
    await callback.answer()

@router.callback_query(F.data.startswith("add_to_group_"))
async def admin_add_to_group_callback(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    user_id = int(callback.data.split("_")[3])
    user = db.get_user(user_id)

    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        chat_info = await router.bot.get_chat(DRIVER_GROUP_ID)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–µ—Å–ª–∏ —É –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)
        try:
            invite_link = await router.bot.create_chat_invite_link(
                chat_id=DRIVER_GROUP_ID,
                member_limit=1,
                expire_date=None
            )
            invite_url = invite_link.invite_link
        except:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é
            invite_url = f"https://t.me/{chat_info.username}" if chat_info.username else "–ì—Ä—É–ø–ø–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
        await router.bot.send_message(
            chat_id=user_id,
            text=f"üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!</b>\n\n"
                 f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ –≥—Ä—É–ø–ø—É –≤–æ–¥–∏—Ç–µ–ª–µ–π.\n"
                 f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ: {invite_url}\n\n"
                 f"–í –≥—Ä—É–ø–ø–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏ –æ–±—â–∞—Ç—å—Å—è —Å –∫–æ–ª–ª–µ–≥–∞–º–∏.",
            parse_mode="HTML"
        )

        await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—é", show_alert=True)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        await callback.message.edit_text(
            f"üí≥ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
            f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {user[1]}\n"
            f"üöó –ê–≤—Ç–æ: {user[2]} ({user[3]})\n"
            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user[4]:.2f}‚Ç¨\n"
            f"ID: {user_id}\n\n"
            f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"add_balance_{user_id}")]
            ])
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏", show_alert=True)

# === –ó–ê–ö–ê–ó –í–û–î–ò–¢–ï–õ–Ø ===
async def order_taxi_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —É –∫–ª–∏–µ–Ω—Ç–∞
    for order_id, order in active_orders.items():
        if order['client_id'] == user_id and order['status'] in ['active', 'accepted']:
            await message.answer(get_text(user_id, 'active_order_client'))
            return
    
    location_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_text(user_id, 'send_location_btn'), request_location=True)],
            [KeyboardButton(text=get_text(user_id, 'enter_address_manually'))],
            [KeyboardButton(text=get_text(user_id, 'cancel'))]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(get_text(user_id, 'send_location'), reply_markup=location_keyboard)
    await state.set_state(OrderTaxi.waiting_for_location)

async def cancel_order(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await state.clear()
    await show_main_menu(message, user_id)
    await message.answer(get_text(user_id, 'order_cancelled'))

async def process_location(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lat = message.location.latitude
    lon = message.location.longitude

    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {lat}, {lon}")
    address = await get_address(lat, lon)
    print(f"–ê–¥—Ä–µ—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: {address}")

    await state.update_data(
        from_lat=lat,
        from_lon=lon,
        from_address=address
    )

    location_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_text(user_id, 'enter_destination'))],
            [KeyboardButton(text=get_text(user_id, 'cancel'))]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        get_text(user_id, 'your_location', address),
        reply_markup=location_keyboard
    )
    await state.set_state(OrderTaxi.waiting_for_destination)

async def process_address_text(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == get_text(user_id, 'cancel'):
        return await cancel_order(message, state)

    from_address = message.text
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥—Ä–µ—Å
    processing_msg = await message.answer("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–¥—Ä–µ—Å...")
    
    from_lat, from_lon = await geocode_address(from_address)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    try:
        await processing_msg.delete()
    except:
        pass

    if from_lat is None or from_lon is None:
        await message.answer(get_text(user_id, 'address_not_found'))
        return

    await state.update_data(
        from_lat=from_lat,
        from_lon=from_lon,
        from_address=from_address
    )

    location_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_text(user_id, 'enter_destination'))],
            [KeyboardButton(text=get_text(user_id, 'cancel'))]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        get_text(user_id, 'your_location', from_address),
        reply_markup=location_keyboard
    )
    await state.set_state(OrderTaxi.waiting_for_destination)

async def process_destination_location(message: Message, state: FSMContext):
    user_id = message.from_user.id
    to_lat = message.location.latitude
    to_lon = message.location.longitude

    to_address = await get_address(to_lat, to_lon)

    data = await state.get_data()
    from_lat = data['from_lat']
    from_lon = data['from_lon']
    from_address = data['from_address']

    distance_km, duration_min = await get_route_info(from_lat, from_lon, to_lat, to_lon)

    price = calculate_price(distance_km, duration_min)

    await state.update_data(
        to_lat=to_lat,
        to_lon=to_lon,
        to_address=to_address,
        price=price,
        distance_km=distance_km,
        duration_min=duration_min
    )

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_text(user_id, 'confirm_order'))],
            [KeyboardButton(text=get_text(user_id, 'suggest_price'))],
            [KeyboardButton(text=get_text(user_id, 'cancel'))]
        ],
        resize_keyboard=True
    )

    await message.answer(
        get_text(user_id, 'order_details', from_address, to_address, distance_km, duration_min, price),
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(OrderTaxi.waiting_for_confirmation)

async def input_destination_manually(message: Message, state: FSMContext):
    user_id = message.from_user.id
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=get_text(user_id, 'cancel'))]],
        resize_keyboard=True
    )
    await message.answer(
        get_text(user_id, 'enter_destination_text'),
        reply_markup=keyboard
    )

async def process_destination_text(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text in [get_text(user_id, 'cancel')]:
        return await cancel_order(message, state)

    to_address = message.text
    data = await state.get_data()
    from_address = data['from_address']
    from_lat = data['from_lat']
    from_lon = data['from_lon']

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –∏ –º–∞—Ä—à—Ä—É—Ç
    processing_msg = await message.answer("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–¥—Ä–µ—Å –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –º–∞—Ä—à—Ä—É—Ç...")

    to_lat, to_lon = await geocode_address(to_address)

    if to_lat is None or to_lon is None:
        try:
            await processing_msg.delete()
        except:
            pass
        await message.answer(get_text(user_id, 'address_not_found'))
        return

    distance_km, duration_min = await get_route_info(from_lat, from_lon, to_lat, to_lon)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    try:
        await processing_msg.delete()
    except:
        pass

    price = calculate_price(distance_km, duration_min)

    await state.update_data(
        to_lat=to_lat,
        to_lon=to_lon,
        to_address=to_address,
        price=price,
        distance_km=distance_km,
        duration_min=duration_min
    )

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_text(user_id, 'confirm_order'))],
            [KeyboardButton(text=get_text(user_id, 'suggest_price'))],
            [KeyboardButton(text=get_text(user_id, 'cancel'))]
        ],
        resize_keyboard=True
    )

    await message.answer(
        get_text(user_id, 'order_details', from_address, to_address, distance_km, duration_min, price),
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(OrderTaxi.waiting_for_confirmation)

async def confirm_order_handler(message: Message, state: FSMContext):
    global order_counter
    user_id = message.from_user.id

    data = await state.get_data()

    client = message.from_user
    from_address = data['from_address']
    to_address = data['to_address']
    price = data['price']
    distance_km = data['distance_km']
    duration_min = data['duration_min']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–¥–ª–æ–∂–∏–ª –ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–≤–æ—é —Ü–µ–Ω—É
    calculated_price = calculate_price(distance_km, duration_min)
    is_suggested_price = abs(price - calculated_price) > 0.01

    waze_url = "https://waze.com/ul"
    if 'from_lat' in data and 'from_lon' in data:
        waze_url = f"https://waze.com/ul?ll={data['from_lat']},{data['from_lon']}&navigate=yes"

    order_counter += 1
    order_id = order_counter

    username_display = "–Ω–µ —É–∫–∞–∑–∞–Ω"
    if client.username:
        username = client.username
        if len(username) > 4:
            username_display = f"@{username[:2]}***{username[-2:]}"
        else:
            username_display = f"@{username[0]}***"

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
    db.increment_client_orders(client.id)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
    client_rating, client_rating_count = db.get_client_rating(client.id)
    client_orders_count = db.get_client_order_count(client.id)

    client_rating_text = ""
    if client_rating:
        if client_rating < 3.0:
            client_rating_text = f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï –ì–ê–ù–î–û–ù! ‚≠ê {client_rating}/5.0 ({client_rating_count}) üìä –ó–∞–∫–∞–∑–æ–≤: {client_orders_count}\n"
        else:
            client_rating_text = f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞: {client_rating}/5.0 ({client_rating_count}) üìä –ó–∞–∫–∞–∑–æ–≤: {client_orders_count}\n"
    else:
        client_rating_text = f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞: –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç üìä –ó–∞–∫–∞–∑–æ–≤: {client_orders_count}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ üí∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π —Ü–µ–Ω–æ–π
    order_emoji = "üí∞üöñ" if is_suggested_price else "üöñ"

    order_text = (
        f"{order_emoji} <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó! #{order_id}</b>\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {client.full_name or client.first_name}\n"
        f"üì± Username: {username_display}\n"
        f"{client_rating_text}\n"
        f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {from_address}\n"
        f"üéØ <b>–ö—É–¥–∞:</b> {to_address}\n"
        f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance_km:.1f} –∫–º\n"
        f"‚è± –í—Ä–µ–º—è: {duration_min:.0f} –º–∏–Ω\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price}‚Ç¨"
    )

    if is_suggested_price:
        order_text += f" (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –∫–ª–∏–µ–Ω—Ç–æ–º, —Ä–∞—Å—á–µ—Ç–Ω–∞—è: {calculated_price}‚Ç¨)"

    order_text += "\n\n"

    accept_button = InlineKeyboardButton(
        text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑",
        callback_data=f"accept_order_{order_id}"
    )
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[accept_button]])

    active_orders[order_id] = {
        'order_id': order_id,
        'client_id': client.id,
        'client_name': client.full_name or client.first_name,
        'client_username': client.username,
        'from_address': from_address,
        'to_address': to_address,
        'price': price,
        'distance_km': distance_km,
        'duration_min': duration_min,
        'waze_url': waze_url,
        'status': 'active',
        'driver_id': None,
        'driver_name': None,
        'driver_username': None,
        'is_suggested_price': is_suggested_price,
        'created_at': datetime.now()
    }

    try:
        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ #{order_id} –≤ –≥—Ä—É–ø–ø—É {DRIVER_GROUP_ID}")
        message_to_edit = await router.bot.send_message(
            chat_id=DRIVER_GROUP_ID,
            text=order_text,
            parse_mode="HTML",
            disable_web_page_preview=False,
            reply_markup=inline_keyboard
        )

        active_orders[order_id]['message_id'] = message_to_edit.message_id
        print(f"–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, message_id: {message_to_edit.message_id}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–ø—Ä–∏–Ω—èÃÅ—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ —á–∞—Å (3600 —Å–µ–∫—É–Ω–¥)
        asyncio.create_task(delete_order_after_delay(order_id, 3600))  # 1 —á–∞—Å = 3600 —Å–µ–∫—É–Ω–¥
        print(f"–ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order_id} —á–µ—Ä–µ–∑ 1 —á–∞—Å")

        await show_main_menu(message, user_id)
        await message.answer(get_text(user_id, 'order_placed'))

    except Exception as e:
        await show_main_menu(message, user_id)
        await message.answer(get_text(user_id, 'order_error'))
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É {DRIVER_GROUP_ID}: {e}")
        print(f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞: {order_text[:200]}...")

    await state.clear()

async def suggest_price_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é —Ü–µ–Ω—É (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ 3‚Ç¨):")
    await state.set_state(OrderTaxi.waiting_for_suggested_price)

async def process_suggested_price(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if message.text == get_text(user_id, 'cancel'):
        await cancel_order(message, state)
        return

    try:
        suggested_price = float(message.text.replace(',', '.'))  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        if suggested_price < 3:
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=get_text(user_id, 'cancel'))]],
                resize_keyboard=True
            )
            await message.answer(
                get_text(user_id, 'minimum_price_error', '3'),
                reply_markup=keyboard
            )
            return

        data = await state.get_data()
        from_address = data['from_address']
        to_address = data['to_address'] 
        distance_km = data['distance_km']
        duration_min = data['duration_min']

        await state.update_data(price=suggested_price)

        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=get_text(user_id, 'confirm_order'))],
                [KeyboardButton(text=get_text(user_id, 'cancel'))]
            ],
            resize_keyboard=True
        )

        await message.answer(
            get_text(user_id, 'order_details', from_address, to_address, distance_km, duration_min, suggested_price),
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        await state.set_state(OrderTaxi.waiting_for_confirmation)

    except (ValueError, TypeError):
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=get_text(user_id, 'cancel'))]],
            resize_keyboard=True
        )
        await message.answer(
            get_text(user_id, 'enter_valid_price'),
            reply_markup=keyboard
        )

@router.callback_query(F.data.startswith("accept_order_"))
async def accept_order_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–º"""
    order_id = int(callback.data.split("_")[2])
    driver = callback.from_user

    print(f"–í–æ–¥–∏—Ç–µ–ª—å {driver.id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ #{order_id}")
    print(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {list(active_orders.keys())}")

    if order_id not in active_orders:
        print(f"–ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö")
        await callback.answer(get_text(driver.id, 'order_not_found'), show_alert=True)
        return

    order = active_orders[order_id]
    if order['status'] != 'active':
        await callback.answer(get_text(driver.id, 'order_already_taken'), show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –Ω–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    driver_data = db.get_user(driver.id)
    if not driver_data or not driver_data[6]:  # is_driver
        await callback.answer(get_text(driver.id, 'not_registered'), show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    is_banned, ban_until = db.is_driver_banned(driver.id)
    if is_banned:
        await callback.answer(get_text(driver.id, 'driver_banned', ban_until.strftime('%d.%m.%Y %H:%M')), show_alert=True)
        return

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    rating, rating_count = db.get_driver_rating(driver.id)
    if rating and rating_count >= 5 and rating < 4.1:
        # –ï—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∏–∑–∫–∏–π, –Ω–æ –≤–æ–¥–∏—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –±–ª–æ–∫–∏—Ä—É–µ–º
        ban_until = datetime.now() + timedelta(days=7)
        with db.lock:
            c = db.conn.cursor()
            c.execute("UPDATE users SET ban_until = ? WHERE user_id = ?", 
                     (ban_until.strftime('%Y-%m-%d %H:%M:%S'), driver.id))
            db.conn.commit()

        await callback.answer(get_text(driver.id, 'driver_banned', ban_until.strftime('%d.%m.%Y %H:%M')), show_alert=True)
        return

    if driver_data[4] < 0.50:  # balance
        await callback.answer(get_text(driver.id, 'low_balance'), show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É –≤–æ–¥–∏—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    for active_order_id, active_order in active_orders.items():
        if active_order['driver_id'] == driver.id and active_order['status'] == 'accepted':
            await callback.answer(get_text(driver.id, 'active_order_exists'), show_alert=True)
            return

    # –°–ø–∏—Å—ã–≤–∞–µ–º 0.50‚Ç¨ —Å –±–∞–ª–∞–Ω—Å–∞ –≤–æ–¥–∏—Ç–µ–ª—è
    db.update_user_balance(driver.id, -0.50, "order_fee", f"–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ #{order_id}")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_order_id = db.create_order(
        client_id=order['client_id'],
        address=f"{order['from_address']} ‚Üí {order['to_address']}",
        price=order['price'],
        region="–†–∏–≥–∞"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ - –ø—Ä–∏–Ω–∏–º–∞–µ–º –µ–≥–æ
    with db.lock:
        c = db.conn.cursor()
        c.execute("UPDATE orders SET status = 'accepted', driver_id = ? WHERE id = ?", (driver.id, db_order_id))
        db.conn.commit()

    order['status'] = 'accepted'
    order['driver_id'] = driver.id
    order['driver_name'] = driver.full_name or driver.first_name
    order['driver_username'] = driver.username
    order['db_order_id'] = db_order_id

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª—è
    rating, rating_count = db.get_driver_rating(driver.id)
    rating_text = f"‚≠ê {rating}/5.0 ({rating_count})" if rating else "‚≠ê –Ω–æ–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å"

    accepted_text = (
        f"‚úÖ <b>–ó–ê–ö–ê–ó #{order_id} –ü–†–ò–ù–Ø–¢</b>\n\n"
        f"üöó –í–æ–¥–∏—Ç–µ–ª—å: {driver.full_name or driver.first_name}\n"
        f"üì± Username: @{driver.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"{rating_text}\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {order['client_name']}\n"
        f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {order['from_address']}\n"
        f"üéØ <b>–ö—É–¥–∞:</b> {order['to_address']}\n"
        f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {order['distance_km']:.1f} –∫–º\n"
        f"‚è± –í—Ä–µ–º—è: {order['duration_min']:.0f} –º–∏–Ω\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {order['price']}‚Ç¨"
    )

    try:
        await router.bot.edit_message_text(
            chat_id=DRIVER_GROUP_ID,
            message_id=order['message_id'],
            text=accepted_text,
            parse_mode="HTML",
            disable_web_page_preview=False,
            reply_markup=None
        )

        new_balance = driver_data[4] - 0.50
        await callback.answer(f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑! –° –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ 0.50‚Ç¨. –û—Å—Ç–∞—Ç–æ–∫: {new_balance:.2f}‚Ç¨", show_alert=True)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ
        client_lang = db.get_user_language(order['client_id'])
        client_message = get_text(order['client_id'], 'order_taken_by_driver', 
                                 driver.full_name or driver.first_name, 
                                 driver.username or '–Ω–µ —É–∫–∞–∑–∞–Ω',
                                 rating_text,
                                 driver.id)

        await router.bot.send_message(
            chat_id=order['client_id'],
            text=client_message,
            parse_mode="HTML"
        )

        driver_message = (
            f"üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order['client_name']}\n"
            f"üì± Username: @{order['client_username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: <a href='tg://user?id={order['client_id']}'>–ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É</a>\n\n"
            f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {order['from_address']}\n"
            f"üéØ <b>–ö—É–¥–∞:</b> {order['to_address']}\n"
            f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {order['distance_km']:.1f} –∫–º\n"
            f"‚è± –í—Ä–µ–º—è: {order['duration_min']:.0f} –º–∏–Ω\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {order['price']}‚Ç¨\n\n"
            f"üß≠ <a href=\"{order['waze_url']}\">–û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ Waze</a>\n\n"
            f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏!"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        complete_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=get_text(driver.id, 'complete_order'), callback_data=f"complete_order_{order_id}")]
        ])

        await router.bot.send_message(
            chat_id=driver.id,
            text=driver_message,
            parse_mode="HTML",
            reply_markup=complete_keyboard
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
        asyncio.create_task(delete_order_after_delay(order_id, 300))  # 5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥
        print(f"–ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ {order_id} —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("rate_") & ~F.data.startswith("rate_client_"))
async def rate_driver_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ü–µ–Ω–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—è"""
    parts = callback.data.split("_")
    order_id = int(parts[1])
    driver_id = int(parts[2])
    rating = int(parts[3])
    client_id = callback.from_user.id

    # –ù–∞–π–¥–µ–º db_order_id –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ order_id
    db_order_id = None
    for active_order_id, order in active_orders.items():
        if active_order_id == order_id and 'db_order_id' in order:
            db_order_id = order['db_order_id']
            break
    
    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö, –∏—â–µ–º –ø–æ –≤–æ–¥–∏—Ç–µ–ª—é –∏ –∫–ª–∏–µ–Ω—Ç—É –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–∞—Ö
    if db_order_id is None:
        with db.lock:
            c = db.conn.cursor()
            c.execute("""
                SELECT id FROM orders 
                WHERE driver_id = ? AND client_id = ? 
                ORDER BY created_at DESC LIMIT 1
            """, (driver_id, client_id))
            result = c.fetchone()
            if result:
                db_order_id = result[0]

    if db_order_id is None:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª –ª–∏ —É–∂–µ –∫–ª–∏–µ–Ω—Ç —ç—Ç–æ—Ç –∑–∞–∫–∞–∑
    with db.lock:
        c = db.conn.cursor()
        c.execute("SELECT id FROM ratings WHERE order_id = ? AND client_id = ? AND rating_type = 'driver'", (db_order_id, client_id))
        existing_rating = c.fetchone()

    if existing_rating:
        await callback.answer(get_text(client_id, 'already_rated'), show_alert=True)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
    db.add_rating(db_order_id, driver_id, client_id, rating, 'driver')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–±–∞–Ω–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è
    is_banned, ban_until = db.check_and_ban_driver(driver_id)

    stars = "‚≠ê" * rating
    await callback.answer(get_text(client_id, 'thanks_for_rating', stars), show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —è–∑—ã–∫–µ –∫–ª–∏–µ–Ω—Ç–∞
    client_lang = db.get_user_language(client_id)
    await callback.message.edit_text(
        get_text(client_id, 'rate_trip', order_id, stars),
        parse_mode="HTML"
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –æ–± –æ—Ü–µ–Ω–∫–µ
    driver = db.get_user(driver_id)
    new_rating, total_ratings = db.get_driver_rating(driver_id)
    rating_text = f"‚≠ê {new_rating}/5.0 ({total_ratings} –æ—Ü–µ–Ω–æ–∫)" if new_rating else "‚≠ê –Ω–æ–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å"

    if is_banned:
        await router.bot.send_message(
            chat_id=driver_id,
            text=get_text(driver_id, 'rating_ban_warning', stars, rating_text, ban_until.strftime('%d.%m.%Y %H:%M')),
            parse_mode="HTML"
        )
    else:
        await router.bot.send_message(
            chat_id=driver_id,
            text=get_text(driver_id, 'new_rating_received', stars, rating_text),
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("rate_client_"))
async def rate_client_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ü–µ–Ω–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–º"""
    parts = callback.data.split("_")
    order_id = int(parts[2])
    client_id = int(parts[3])
    rating = int(parts[4])
    driver_id = callback.from_user.id

    # –ù–∞–π–¥–µ–º db_order_id –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ order_id
    db_order_id = None
    for active_order_id, order in active_orders.items():
        if active_order_id == order_id and 'db_order_id' in order:
            db_order_id = order['db_order_id']
            break
    
    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö, –∏—â–µ–º –ø–æ –≤–æ–¥–∏—Ç–µ–ª—é –∏ –∫–ª–∏–µ–Ω—Ç—É –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–∞—Ö
    if db_order_id is None:
        with db.lock:
            c = db.conn.cursor()
            c.execute("""
                SELECT id FROM orders 
                WHERE driver_id = ? AND client_id = ? 
                ORDER BY created_at DESC LIMIT 1
            """, (driver_id, client_id))
            result = c.fetchone()
            if result:
                db_order_id = result[0]

    if db_order_id is None:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª –ª–∏ —É–∂–µ –≤–æ–¥–∏—Ç–µ–ª—å —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    with db.lock:
        c = db.conn.cursor()
        c.execute("SELECT id FROM ratings WHERE order_id = ? AND driver_id = ? AND rating_type = 'client'", (db_order_id, driver_id))
        existing_rating = c.fetchone()

    if existing_rating:
        await callback.answer(get_text(driver_id, 'already_rated'), show_alert=True)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –∫–ª–∏–µ–Ω—Ç–∞
    db.add_rating(db_order_id, driver_id, client_id, rating, 'client')

    stars = "‚≠ê" * rating
    await callback.answer(get_text(driver_id, 'client_rated', stars), show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        get_text(driver_id, 'order_completed_driver'),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("complete_order_"))
async def complete_order_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[2])
    driver = callback.from_user

    if order_id not in active_orders:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    order = active_orders[order_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç —ç—Ç–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º
    if order['driver_id'] != driver.id:
        await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑", show_alert=True)
        return

    if order['status'] != 'accepted':
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)
        return

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if 'db_order_id' in order:
        db.complete_order(order['db_order_id'])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    order['status'] = 'completed'

    try:
        await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!", show_alert=True)

        # –ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ
        client_lang = db.get_user_language(order['client_id'])
        rating_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚≠ê", callback_data=f"rate_{order_id}_{driver.id}_1"),
                InlineKeyboardButton(text="‚≠ê‚≠ê", callback_data=f"rate_{order_id}_{driver.id}_2"),
                InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê", callback_data=f"rate_{order_id}_{driver.id}_3"),
            ],
            [
                InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_{order_id}_{driver.id}_4"),
                InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_{order_id}_{driver.id}_5"),
            ]
        ])

        await router.bot.send_message(
            chat_id=order['client_id'],
            text=get_text(order['client_id'], 'order_completed', order_id, driver.full_name or driver.first_name),
            parse_mode="HTML",
            reply_markup=rating_keyboard
        )

        # –ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è
        client_rating_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚≠ê", callback_data=f"rate_client_{order_id}_{order['client_id']}_1"),
                InlineKeyboardButton(text="‚≠ê‚≠ê", callback_data=f"rate_client_{order_id}_{order['client_id']}_2"),
                InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê", callback_data=f"rate_client_{order_id}_{order['client_id']}_3"),
            ],
            [
                InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_client_{order_id}_{order['client_id']}_4"),
                InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_client_{order_id}_{order['client_id']}_5"),
            ]
        ])

        await router.bot.send_message(
            chat_id=driver.id,
            text=get_text(driver.id, 'rate_client', order_id, order['client_name']),
            parse_mode="HTML",
            reply_markup=client_rating_keyboard
        )

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—é
        await router.bot.send_message(
            chat_id=driver.id,
            text=get_text(driver.id, 'order_payment_info', order_id, order['price']),
            parse_mode="HTML"
        )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –∏–∑ –≥—Ä—É–ø–ø—ã
        try:
            await router.bot.delete_message(
                chat_id=DRIVER_GROUP_ID,
                message_id=order['message_id']
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")

        # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        del active_orders[order_id]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –≤—Ä—É—á–Ω—É—é
async def input_address_manually(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await message.answer(get_text(user_id, 'enter_current_address'))
    await state.set_state(OrderTaxi.waiting_for_address)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
bot = Bot(
    token=API_TOKEN, 
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    dp.include_router(router)

    router.bot = bot
    router.driver_group_id = DRIVER_GROUP_ID

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await cleanup_old_orders()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(periodic_cleanup())
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
